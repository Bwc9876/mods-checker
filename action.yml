name: Check Outer Wilds mod
description: Checks an Outer Wilds mod for common errors and warnings
author: Ben C <bwc9876@gmail.com>

inputs:
  sourceType:
    description: The type of source to pull the mod from (`repo`, `url`, or `zip`)
    required: true
  source:
    description: The source of the mod
    required: true
  expectedUniqueName:
    description: The expected unique name of the mod
    required: false
    default: ''
  skipDuplicateCheck:
    description: Whether to skip the duplicate check
    required: false
    default: "false"
  token:
    description: 'The GitHub token to use for downloading the action, defaults to workflow token'
    required: true
    default: ${{ github.token }}

outputs:
  resultJson:
    description: The JSON output of the action
    value: ${{ steps.run_action.outputs.resultJson }}

runs:
  using: "composite"
  steps:
    - name: Set reusable variables
      shell: bash
      run: |
        echo "action_repo=mods-checker" >> $GITHUB_ENV
        echo "action_org=Bwc9876" >> $GITHUB_ENV
        echo "binary_name=mods-checker" >> $GITHUB_ENV

    - name: Add binary extension
      shell: bash
      if: runner.os == 'Windows'
      run: echo "binary_name=${{ env.binary_name }}.exe" >> $GITHUB_ENV

    - name: Get Action Version
      id: get_action_version
      shell: pwsh
      run: |
        $finalComponent = Split-Path -Leaf ${{ github.action_path }}
        if ($finalComponent -eq "${{ env.action_repo }}") {
          $version = ""
        } else {
          $version = $finalComponent
        }
        Write-Output "version=$version" >> $Env:GITHUB_OUTPUT

    - name: Download Action
      shell: bash
      run: |
        gh release download ${{ steps.get_action_version.outputs.version }} --repo ${{ env.action_org }}/${{ env.action_repo }} --pattern '${{ runner.os }}.tgz'
        tar -xzf ${{ runner.os }}.tgz
      env:
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: Run Action
      id: run_action
      shell: bash
      run: echo "resultJson=$(./${{ runner.os }}/${{ env.binary_name }} -r ${{ inputs.sourceType }} ${{ inputs.source }} ${{ inputs.expectedUniqueName != '' && format('--expected-unique-name={0}', inputs.expectedUniqueName) || '' }} ${{ inputs.skipDuplicateCheck && '--skip-exists' || ''}})" >> $GITHUB_OUTPUT

    - name: Output Results
      uses: LouisBrunner/checks-action@v1.6.1
      with:
        token: ${{ inputs.token }}
        name: "Mod Checker"
        conclusion: ${{ fromJson(steps.run_action.outputs.resultJson).error && 'success' || 'failure' }}
        output: |
          {
            "summary": ${{ format('Check Finished! Error: {0}, Warning(s): {1}', fromJson(steps.run_action.outputs.resultJson).error, fromJson(steps.run_action.outputs.resultJson).warnings) }}
          }
        images: |
          ${{ fromJson(steps.run_action.outputs.resultJson).error && [{"alt": "Error", "image_url": "https://outerwildsmods.com/images/error.png"}] || [{"alt": "Success", "image_url": "https://pbs.twimg.com/profile_images/1607623499807342592/tozO2Xvd_400x400.jpg"}]}}
